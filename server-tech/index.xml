<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Серверные веб-технологии on My New Hugo Site</title>
    <link>https://balrundev.github.io/server-tech/</link>
    <description>Recent content in Серверные веб-технологии on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://balrundev.github.io/server-tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/invariant/theme-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/invariant/theme-1/</guid>
      <description>Тема 1. Проектирование CRUD для серверного веб-приложения Реализован REST API для выполнения операций CRUD в базе данных MongoDB.
Приложение реализовано с использованием Express, bodyParser, Mongoose.
Реализованы следующие операции:
GET /products - получение списка продуктов
POST /products/new - добавление нового продукта
POST /products/update/:id - обновление информации о продукте по ID
POST /products/delete/:id - удаление информации о продукте по ID
При отправке запросов для добавления и обновления продукта информация о нём передаётся в теле POST-запроса.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/invariant/theme-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/invariant/theme-2/</guid>
      <description>Тема 2. Проектирование приложения на основе фреймворка Symphony Приложение реализует API для выполнения арифметических операций.
Маршруты описаны в файле routes.yaml.
Контроллер реализован в файле CalcController.php.
Ответ сервера при выполнении запроса по маршруту /calc/add/2/3:
{ &amp;#34;result&amp;#34;: 5 } Ответ сервера при выполнении запроса по маршруту /calc/substract/5/7:
{ &amp;#34;result&amp;#34;: -2 } Ответ сервера при выполнении запроса по маршруту /calc/multiply/7/5:
{ &amp;#34;result&amp;#34;: 35 } Ответ сервера при выполнении запроса по маршруту /calc/divide/5/7:
{ &amp;#34;result&amp;#34;: 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/invariant/theme-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/invariant/theme-3/</guid>
      <description>Тема 3. Разработка базы данных на MongoDB Для разработки базы данных на MongoDB можно использовать MongoDB Cloud.
Этапы разработки базы данных:
создание базы данных создание коллекций добавление данных MongoDB не требует определения схемы документа, что позволяет вносить изменения в структуру документа при добавлении или редактировании данных.
Этапы создания базы данных в MongoDB Cloud:
создание организации (organization) создание проекта (project) создание кластера (cluster) и базы данных с помощью MongoDB Atlas добавление данных с помощью MongoDB Atlas, MongoDB Compass или веб-приложения </description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/invariant/theme-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/invariant/theme-4/</guid>
      <description>Тема 4. Подготовка виртуального сервера или деплой-платформы для публикации веб-ресурса на основе Ghost.js Ghost.js можно установить с помощью Docker-контейнера.
Для установки контейнера необходимо выполнить команду:
docker pull ghost Для запуска Ghost необходимо выполнить команду:
docker run -d --name some-ghost -e url=http://localhost:3001 -p 3001:2368 ghost После этого Ghost будет доступен по адресу server_ip:3001.
Панель администратора доступна по адресу server_ip:3001/ghost.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/lab/theme-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/lab/theme-1/</guid>
      <description>Тема 1. Протоколы веба и серверные веб-технологии на платформе Node.js I. Моделирование взаимодействия «клиент-сервер» с помощью программы telnet и программы curl Подготовка данных для отправки запроса
Отправка запроса с помощью telnet
Заголовки и тело запроса:
Ответ сервера:
X-Test: POST0b63c4e574b64e2a9359be0340b1447b
Отправка запроса с помощью cURL
Вывод тела ответа:
Вывод заголовков ответа:
Для вывода заголовков ответа необходимо указать ключ -i.
X-Test: POST0b63c4e574b64e2a9359be0340b1447b
II. Создание простого веб-сервера на основе Node.js Пример ответа сервера:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/lab/theme-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/lab/theme-2/</guid>
      <description>Тема 2. Использование серверных веб-технологий на платформе PHP I. Развёртывание стека LAMP Часть I. Развёртывание PHP/FPM + NGINX
Часть II
II. Разработка на PHP с помощью GD2 графического интерфейса визуализации данных, полученных с помощью сетевого интерфейса </description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/lab/theme-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/lab/theme-3/</guid>
      <description>Тема 3. Управление БД в веб-приложении Для создания базы данных MongoDB можно использовать MongoDB Cloud.
Подключение к серверу баз данных может производиться с помощью утилиты mongosh (MongoDB Shell).
Создание базы данных use j_users Добавление содержимого db.users.insertMany([{&amp;#34;login&amp;#34;:&amp;#34;student&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;tneduts&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;myuser&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;mypas&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;teacher&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;qq&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;myking&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;myqueen&amp;#34;}]) Получение данных db.users.findOne({login: &amp;#34;teacher&amp;#34;}).password Подключение с помощью mongosh mongosh &amp;#34;mongodb connection string&amp;#34; Получение списка всех записей db.users.find().map(x=&amp;gt;({username:x.login, password:x.password})) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/react-effector-app/react-effector-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/react-effector-app/react-effector-app/</guid>
      <description>Веб-приложение для конвертации валюты с использованием React и effector http://calm-mountain-16557.herokuapp.com/
API: http://195.58.48.106/api/currency_rates.php?charcode=USD</description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/var/task1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/var/task1/</guid>
      <description>Тема 1. Подготовка сообщения и мастер-класса по сравнению Rest API и RPC REST API REST (Representational State Transfer - передача состояния представления) — архитектурный стиль взаимодействия компонентов распределённого приложения в сети.
Ограничения для построения REST-приложений по Филдингу:
Модель клиент-сервер Отсутствие состояния Кэширование Единообразие интерфейса Слои Код по требованию Преимущества REST-приложений:
Надёжностть Производительность Масштабируемость Прозрачность системы взаимодействия Простота интерфейсов Портативность компонентов Лёгкость внесения изменений Способностью эволюционировать, приспосабливаясь к новым требованиям PRC PRC (Remote Procedure Call - удалённый вызов процедур) — класс технологий, позволяющих программам вызывать функции или процедуры в другом адресном пространстве (на удалённых узлах, либо в независимой сторонней системе на том же узле).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/var/task2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/var/task2/</guid>
      <description>Тема 2. Подготовка выступления и мастер-класса по эволюции стандартов PSR PSR (PHP Standarts Recommendations) - это набор рекомендаций для PHP-разработчиков.
PSR-0 – Стандарт автозагрузки PSR-1 – Базовый стандарт оформления кода PSR-2 – Рекомендации по оформлению кода PSR-3 – Интерфейс протоколирования PSR-4 – Улучшенная автозагрузка PSR-0: Autoloading Standard описывает обязательные требования, которых необходимо придерживаться для взаимодействия с автозагрузчиком. Стандарт устарел и заменён PSR-4.
PSR-4: Autoloading Standard описывает спецификацию автозагрузки классов из файлов.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://balrundev.github.io/server-tech/var/task3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://balrundev.github.io/server-tech/var/task3/</guid>
      <description>Тема 3. Подготовка презентации и мастер-класса по сравнению характеристик MongoDB и Cassandra MongoDB — документоориентированная система управления базами данных, не требующая описания схемы таблиц. Считается одним из классических примеров NoSQL-систем, использует JSON-подобные документы и схему базы данных.
Apache Cassandra — распределённая система управления базами данных, относящаяся к классу NoSQL-систем и рассчитанная на создание высокомасштабируемых и надёжных хранилищ огромных массивов данных, представленных в виде хэша.
MongoDB Имеется поддержка индексов. Система может работать с набором реплик, то есть содержать две или более копии данных на различных узлах.</description>
    </item>
    
  </channel>
</rss>
